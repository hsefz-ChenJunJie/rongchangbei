# AI对话应用后端 Dockerfile - 优化版本
# 使用多阶段构建减少最终镜像大小

# 阶段1：构建阶段
FROM python:3.12-slim as builder

# 设置工作目录
WORKDIR /build

# 设置环境变量，使用清华镜像源
ENV PYPI_INDEX_URL="https://pypi.tuna.tsinghua.edu.cn/simple"
ENV PIP_TRUSTED_HOST="pypi.tuna.tsinghua.edu.cn"

# 替换APT源为清华镜像源并配置APT加速
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list.d/debian.sources && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list.d/debian.sources && \
    echo 'Acquire::http::Timeout "10";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'Acquire::Retries "2";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'APT::Install-Recommends "false";' >> /etc/apt/apt.conf.d/99timeout

# 一次性安装所有构建依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    build-essential \
    pkg-config \
    libasound2-dev \
    portaudio19-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 安装 uv（快速的Python包管理器）
RUN pip install --no-cache-dir -i $PYPI_INDEX_URL uv

# 复制requirements文件
COPY requirements.txt .

# 使用 uv 预编译所有依赖到本地缓存
RUN uv pip install --system --no-cache -i $PYPI_INDEX_URL \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    websockets==12.0 \
    pydantic==2.5.0 \
    pydantic-settings==2.1.0 \
    vosk==0.3.45 \
    openai==1.3.0 \
    httpx==0.25.2 \
    asyncio-mqtt==0.11.1 \
    wave==0.0.2 \
    python-multipart==0.0.6 \
    python-dotenv==1.0.0 \
    typing-extensions==4.8.0 \
    structlog==23.2.0 \
    pyaudio>=0.2.11 \
    pytest==7.4.3 \
    pytest-asyncio==0.21.1

# 阶段2：运行阶段
FROM python:3.12-slim as runtime

# 设置工作目录
WORKDIR /app

# 替换APT源并只安装运行时依赖
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list.d/debian.sources && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list.d/debian.sources && \
    apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libportaudio2 \
    libportaudiocpp0 \
    libasound2 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 从构建阶段复制已安装的Python包
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# 创建非root用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 复制应用代码
COPY . .

# 创建必要的目录并设置权限
RUN mkdir -p /app/logs /app/model && \
    chown -R appuser:appuser /app

# 切换到非root用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# 暴露端口
EXPOSE 8000

# 设置环境变量
ENV PYTHONPATH=/app \
    HOST=0.0.0.0 \
    PORT=8000

# 启动命令
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]