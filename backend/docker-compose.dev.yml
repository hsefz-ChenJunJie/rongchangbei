version: '3.8'

services:
  ai-backend-dev:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    container_name: ai-dialogue-backend-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # 基础配置 - 开发环境
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      
      # LLM服务配置（请设置您的API密钥）
      - OPENROUTER_API_KEY=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
      - OPENROUTER_MODEL=qwen/qwen3-235b-a22b:free
      - OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
      - OPENROUTER_TEMPERATURE=0.7
      - OPENROUTER_MAX_TOKENS=800
      
      # STT服务配置 - 开发环境使用Mock模式
      - USE_REAL_VOSK=false
      - VOSK_MODEL_PATH=/app/model/vosk-model
      - VOSK_SAMPLE_RATE=16000
      
      # 安全配置 - 开发环境允许所有源
      - ALLOWED_ORIGINS=["*"]
      
      # 超时配置
      - STT_TIMEOUT=30
      - LLM_TIMEOUT=30
      - WEBSOCKET_TIMEOUT=300
      - TIMEOUT=60
      
      # 日志配置 - 开发环境
      - LOG_FILE=logs/app.log
      - LOG_MAX_SIZE=100MB
      - LOG_BACKUP_COUNT=5
      
      # 音频处理配置
      - AUDIO_CHUNK_SIZE=4096
      - AUDIO_SAMPLE_RATE=16000
      - AUDIO_CHANNELS=1
      
      # 性能配置
      - MAX_WORKERS=4
    volumes:
      # 🔥 关键：挂载源代码目录实现热重载
      - .:/app:rw
      # 挂载本地模型目录（如果有的话）
      - ./model:/app/model:ro
      # 开发环境日志挂载到本地
      - ./logs:/app/logs:rw
    networks:
      - ai-network-dev
    # 开发环境不需要严格的资源限制
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.0'
    #       memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # 开发环境可以覆盖启动命令
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app", "--log-level", "debug"]

  # 可选：开发环境数据库（如果需要的话）
  # postgres-dev:
  #   image: postgres:15-alpine
  #   container_name: ai-dialogue-postgres-dev
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=ai_dialogue_dev
  #     - POSTGRES_USER=dev_user
  #     - POSTGRES_PASSWORD=dev_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-dev-data:/var/lib/postgresql/data
  #   networks:
  #     - ai-network-dev

  # 可选：开发环境Redis（如果需要缓存）
  # redis-dev:
  #   image: redis:7-alpine
  #   container_name: ai-dialogue-redis-dev
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-dev-data:/data
  #   networks:
  #     - ai-network-dev
  #   command: redis-server --appendonly yes

networks:
  ai-network-dev:
    driver: bridge

volumes:
  # postgres-dev-data:
  #   driver: local
  # redis-dev-data:
  #   driver: local